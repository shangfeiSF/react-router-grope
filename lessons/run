#!/usr/bin/env node
var fs = require('fs')
var path = require('path')
var cp = require('child_process')

var nopt = require('nopt')
var colors = require('colors')
var Promise = require('bluebird')

Promise.promisifyAll(fs)

var knowns = {
  'env': String,
  'input': String
}
var shorts = (function () {
  var shorts = {
    'dev': ['--env', 'development'],
    'pro': ['--env', 'production'],
    'i': ['--input']
  }

  fs.readdirSync(process.cwd()).forEach(function (dir) {
    var state = fs.statSync(path.join(process.cwd(), dir))
    if (state.isDirectory()) {
      var cmd = 'i' + dir.split('\.').shift()
      shorts[cmd] = ['--input']
      shorts[cmd].push(dir)
    }
  })

  return shorts
})()
var options = nopt(knowns, shorts, process.argv, 2)

if (options.input) {
  fs.readdirAsync(process.cwd())
    .filter(function (dir) {
      return fs.statAsync(path.join(process.cwd(), dir))
        .then(function (state) {
          return (dir === options.input || dir === options.input.slice(0, -1)) && state.isDirectory()
        })
    })

    .then(function (dirs) {
      var dir = dirs.pop()

      var commands = {
        env: ['webpack-dev-server ', '--inline ', '--content-base', ' public']
      }

      var more = {
        10: ['--history-api-fallback']
      }

      if (!options.env || options.env === 'development') {
        var cmd = commands.env.concat(['--config', '../webpack.common.js'])

        var index = dir.split('\.').shift()
        if(more[index]){
          cmd = cmd.concat(more[index])
        }

        cp.execSync(cmd.join(' '), {
            cwd: path.join(process.cwd(), dir),
            stdio: [process.stdin, process.stdout, process.stderr]
          }
        )
      }
      else if (options.env === 'production') {

      }
    })
}
else {
  console.log('Error Input'.red)
}